\documentclass{article}
\usepackage{listings}
\usepackage{graphicx}
\usepackage{hyperref}
\usepackage[margin=1in]{geometry}

\title{RPweave: Integrated R+Python Document}
\author{Data Scientist}
\date{\today}

\begin{document}

\maketitle

<<setup, include=FALSE>>=
library(knitr)
library(reticulate)
library(ggplot2)

# Use the virtual environment
use_python("venv/bin/python")

# Knitr options - disable highlighting
opts_chunk$set(
  echo = TRUE,
  warning = FALSE,
  message = FALSE,
  fig.width = 8,
  fig.height = 6,
  fig.path = "outputs/",
  highlight = FALSE
)
@

\begin{abstract}
This document demonstrates the integration of R and Python code within a single \LaTeX{} document using knitr and reticulate, with environment management handled by UV.
\end{abstract}

\section{Introduction}
This is a proof-of-concept for RPweave, a system that combines Sweave (R) and Pweave (Python) functionality.

\section{R Analysis}
<<r-analysis>>=
# Basic R analysis
data(mtcars)
cat("Dataset dimensions:", dim(mtcars), "\n")
cat("Column names:", names(mtcars), "\n")

# Summary statistics
summary(mtcars$mpg)

# Simple visualization
ggplot(mtcars, aes(x = wt, y = mpg)) +
  geom_point() +
  geom_smooth(method = "lm") +
  ggtitle("MPG vs Weight") +
  theme_minimal()
@

\section{Python Analysis}
<<python-analysis, engine='python'>>=
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Create sample data
np.random.seed(42)
data = pd.DataFrame({
    'x': np.arange(100),
    'y': np.random.randn(100).cumsum()
})

print("Python DataFrame summary:")
print(data.describe())

# Create plot
plt.figure(figsize=(8, 6))
plt.plot(data['x'], data['y'], 'b-', linewidth=2)
plt.title('Random Walk Generated in Python')
plt.xlabel('Time')
plt.ylabel('Value')
plt.grid(True, alpha=0.3)
plt.tight_layout()
plt.savefig('outputs/python_plot.png', dpi=150, bbox_inches='tight')
plt.show()
@

\section{Cross-Language Integration - Final}
<<final-cross>>=
# Send data to Python
py$input_data <- data.frame(x = 1:5, y = c(10, 20, 15, 25, 30))
cat("Data sent to Python\n")
@

<<python-final, engine='python'>>=
print("Data received in Python:")
print(input_data)

# Process and store result back in py object
import pandas as pd
processed = input_data.copy()
processed['doubled'] = processed['y'] * 2
print("After processing:")
print(processed)

# Store result in the shared environment
r.output_data = processed
print("Result stored for R")
@

\section{Conclusion}
RPweave successfully integrates R and Python in a single reproducible document with proper environment management.

\end{document}